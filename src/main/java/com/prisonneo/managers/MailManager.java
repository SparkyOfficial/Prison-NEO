package com.prisonneo.managers;

import com.prisonneo.PrisonNEO;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.*;

public class MailManager implements Listener {
    
    private final PrisonNEO plugin;
    private final Map<UUID, List<PrisonMail>> playerMail;
    private final Map<UUID, Boolean> mailNotifications;
    
    public MailManager(PrisonNEO plugin) {
        this.plugin = plugin;
        this.playerMail = new HashMap<>();
        this.mailNotifications = new HashMap<>();
        
        startRandomMailDelivery();
    }
    
    public void openMailbox(Player player) {
        List<PrisonMail> mail = playerMail.getOrDefault(player.getUniqueId(), new ArrayList<>());
        
        Inventory inv = Bukkit.createInventory(null, 54, "¬ße–ü–æ—á—Ç–æ–≤—ã–π –Ø—â–∏–∫ (" + mail.size() + ")");
        
        // Display mail items
        for (int i = 0; i < Math.min(mail.size(), 45); i++) {
            PrisonMail letter = mail.get(i);
            ItemStack item = new ItemStack(letter.isRead() ? Material.PAPER : Material.MAP);
            ItemMeta meta = item.getItemMeta();
            meta.setDisplayName((letter.isRead() ? "¬ß7" : "¬ßf") + letter.getSubject());
            meta.setLore(Arrays.asList(
                "¬ß7–û—Ç: ¬ße" + letter.getSender(),
                "¬ß7–î–∞—Ç–∞: ¬ßf" + letter.getFormattedDate(),
                letter.isRead() ? "¬ß7–ü—Ä–æ—á–∏—Ç–∞–Ω–æ" : "¬ßa–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ",
                "¬ß7–õ–ö–ú - –ü—Ä–æ—á–∏—Ç–∞—Ç—å"
            ));
            item.setItemMeta(meta);
            inv.setItem(i, item);
        }
        
        // Mail actions
        ItemStack compose = new ItemStack(Material.WRITABLE_BOOK);
        ItemMeta composeMeta = compose.getItemMeta();
        composeMeta.setDisplayName("¬ßa–ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ");
        compose.setItemMeta(composeMeta);
        inv.setItem(49, compose);
        
        ItemStack delete = new ItemStack(Material.LAVA_BUCKET);
        ItemMeta deleteMeta = delete.getItemMeta();
        deleteMeta.setDisplayName("¬ßc–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–∏—Å—å–º–∞");
        delete.setItemMeta(deleteMeta);
        inv.setItem(53, delete);
        
        player.openInventory(inv);
        
        // Mark notifications as read
        mailNotifications.put(player.getUniqueId(), false);
    }
    
    public void sendMail(Player sender, String recipient, String subject, String content) {
        Player target = Bukkit.getPlayer(recipient);
        UUID targetUUID = target != null ? target.getUniqueId() : null;
        
        if (targetUUID == null) {
            sender.sendMessage("¬ßc–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }
        
        PrisonMail mail = new PrisonMail(sender.getName(), subject, content);
        
        List<PrisonMail> targetMail = playerMail.getOrDefault(targetUUID, new ArrayList<>());
        targetMail.add(mail);
        playerMail.put(targetUUID, targetMail);
        
        // Notify recipient
        if (target.isOnline()) {
            target.sendMessage("¬ßeüìß –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç " + sender.getName());
            mailNotifications.put(targetUUID, true);
        }
        
        sender.sendMessage("¬ßa–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É " + recipient);
        
        // Cost for sending mail
        plugin.getEconomyManager().removeMoney(sender, 5.0);
    }
    
    public void deliverSystemMail(Player player, String subject, String content) {
        UUID uuid = player.getUniqueId();
        PrisonMail mail = new PrisonMail("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", subject, content);
        
        List<PrisonMail> targetMail = playerMail.getOrDefault(uuid, new ArrayList<>());
        targetMail.add(mail);
        playerMail.put(uuid, targetMail);
        
        if (player.isOnline()) {
            player.sendMessage("¬ßeüìß –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏");
            mailNotifications.put(uuid, true);
        }
    }
    
    private void startRandomMailDelivery() {
        Bukkit.getScheduler().runTaskTimer(plugin, () -> {
            for (Player player : Bukkit.getOnlinePlayers()) {
                if (Math.random() < 0.05) { // 5% chance per 30 minutes
                    deliverRandomMail(player);
                }
            }
        }, 0L, 36000L); // Every 30 minutes
    }
    
    private void deliverRandomMail(Player player) {
        String[] subjects = {
            "–ü–∏—Å—å–º–æ –∏–∑ –¥–æ–º–∞", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å—ã–ª–∫–µ", "–°—É–¥–µ–±–Ω–∞—è –ø–æ–≤–µ—Å—Ç–∫–∞",
            "–ü–∏—Å—å–º–æ –æ—Ç –¥—Ä—É–≥–∞", "–ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            "–ü–∏—Å—å–º–æ –æ—Ç –∞–¥–≤–æ–∫–∞—Ç–∞", "–°–µ–º–µ–π–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", "–î–µ–ª–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        };
        
        String[] contents = {
            "–î–æ—Ä–æ–≥–æ–π —Å—ã–Ω, –º—ã —Å–∫—É—á–∞–µ–º –ø–æ —Ç–µ–±–µ. –ë–µ—Ä–µ–≥–∏ —Å–µ–±—è –≤ —Ç—é—Ä—å–º–µ.",
            "–î–ª—è –≤–∞—Å –ø–æ—Å—Ç—É–ø–∏–ª–∞ –ø–æ—Å—ã–ª–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ö—Ä–∞–Ω–µ.",
            "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å—É–¥–µ–±–Ω–æ–µ –∑–∞—Å–µ–¥–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ.",
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ –≤ —Ç—é—Ä—å–º–µ? –ñ–¥—É —Ç–≤–æ–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è.",
            "–í–∞—à —Å—á—ë—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è.",
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –Ω–æ—Ä–º–µ. –ë–µ—Ä–µ–≥–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ.",
            "–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –¥–µ–ª–æ–º. –ï—Å—Ç—å —Ö–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏.",
            "–ë–∞–±—É—à–∫–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç –ø—Ä–∏–≤–µ—Ç. –û–Ω–∞ –≥–æ—Ç–æ–≤–∏—Ç —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –ø–∏—Ä–æ–≥.",
            "–£ –º–µ–Ω—è –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞ –¥–ª—è –≤–∞—Å –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è."
        };
        
        String subject = subjects[(int)(Math.random() * subjects.length)];
        String content = contents[(int)(Math.random() * contents.length)];
        
        deliverSystemMail(player, subject, content);
    }
    
    @EventHandler
    public void onMailboxClick(InventoryClickEvent event) {
        String title = event.getView().getTitle();
        if (!title.startsWith("¬ße–ü–æ—á—Ç–æ–≤—ã–π –Ø—â–∏–∫")) return;
        
        event.setCancelled(true);
        Player player = (Player) event.getWhoClicked();
        
        if (event.getCurrentItem() == null) return;
        
        int slot = event.getSlot();
        List<PrisonMail> mail = playerMail.getOrDefault(player.getUniqueId(), new ArrayList<>());
        
        if (slot < mail.size()) {
            // Read mail
            PrisonMail letter = mail.get(slot);
            letter.markAsRead();
            
            player.closeInventory();
            player.sendMessage("¬ß6=== " + letter.getSubject() + " ===");
            player.sendMessage("¬ß7–û—Ç: " + letter.getSender());
            player.sendMessage("¬ß7–î–∞—Ç–∞: " + letter.getFormattedDate());
            player.sendMessage("¬ßf" + letter.getContent());
            player.sendMessage("¬ß6========================");
            
        } else if (slot == 49) {
            // Compose mail
            player.closeInventory();
            player.sendMessage("¬ße–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ¬ßf/mail send <–∏–≥—Ä–æ–∫> <—Ç–µ–º–∞> <—Å–æ–æ–±—â–µ–Ω–∏–µ>");
            
        } else if (slot == 53) {
            // Delete all mail
            playerMail.remove(player.getUniqueId());
            player.closeInventory();
            player.sendMessage("¬ßc–í—Å—è –ø–æ—á—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!");
        }
    }
    
    public boolean hasNewMail(Player player) {
        return mailNotifications.getOrDefault(player.getUniqueId(), false);
    }
    
    public int getMailCount(Player player) {
        return playerMail.getOrDefault(player.getUniqueId(), new ArrayList<>()).size();
    }
    
    public int getUnreadMailCount(Player player) {
        List<PrisonMail> mail = playerMail.getOrDefault(player.getUniqueId(), new ArrayList<>());
        return (int) mail.stream().filter(m -> !m.isRead()).count();
    }
    
    // Inner class for mail data
    public static class PrisonMail {
        private final String sender;
        private final String subject;
        private final String content;
        private final long timestamp;
        private boolean read;
        
        public PrisonMail(String sender, String subject, String content) {
            this.sender = sender;
            this.subject = subject;
            this.content = content;
            this.timestamp = System.currentTimeMillis();
            this.read = false;
        }
        
        public String getSender() { return sender; }
        public String getSubject() { return subject; }
        public String getContent() { return content; }
        public long getTimestamp() { return timestamp; }
        public boolean isRead() { return read; }
        public void markAsRead() { this.read = true; }
        
        public String getFormattedDate() {
            Date date = new Date(timestamp);
            return date.toString();
        }
    }
}
